<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wondertek.mybatis.mapper.EmployeeMapperDynamicSQL">

    <!--
        动态SQL查询：
            if 判断
            choose（when otherwise） 分支选择
            trim 字符串截取
            foreach
    -->

    <!--List<Employee> getEmpsByConditionIf(Employee employee);-->
    <select id="getEmpsByConditionIf" resultType="com.wondertek.mybatis.domain.Employee">
        select * from tb_employee
        <!--
            test 判断表达式
            遇到特殊符号应该写转义字符
            $$
        -->
        WHERE
        <if test="id != null">
            id = #{id}
        </if>
        <if test="lastName != null and lastName != ''">
            AND last_name LIKE #{lastName}
        </if>
        <if test="email != null and email.trim()!=''">
            AND email=#{email}
        </if>
        <!-- -->
        <if test="gender==0 or gender==1">
            AND gender = #{gender}
        </if>

    </select>

    <!--List<Employee> getEmpsByConditionByTrim(Employee employee);-->
    <select id="getEmpsByConditionByTrim" resultType="com.wondertek.mybatis.domain.Employee">
        select * from tb_employee
        <!--
            后面多出的and or where标签不能解决
            trim 字符串截取 前缀：trim标签体中是整个字符串拼串后的结果
                prefix ：给拼串后的整个字符串加一个前缀
                prefixOverrides="" 前缀覆盖
                suffix="" 给拼串后的整个字符串加一个后缀
                suffixOverrides="" 后缀覆盖
        -->
        <trim prefix="where" suffixOverrides="and" >
        <if test="id != null">
             id = #{id} and
        </if>
        <if test="lastName != null and lastName != ''">
             last_name LIKE #{lastName} AND
        </if>
        <if test="email != null and email.trim()!=''">
             email=#{email} AND
        </if>
        <!-- -->
        <if test="gender==0 or gender==1">
             gender = #{gender} AND
        </if>
        </trim>
    </select>

    <!--List<Employee> getEmpsByConditionByChoose(Employee employee);-->

    <select id="getEmpsByConditionByChoose" resultType="com.wondertek.mybatis.domain.Employee">
        <!--

        -->
        select * from tb_employee
        <where>
            <choose>
                <when test="id != null">
                    id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name like #{lastName}
                </when>
                <when test="email!=null">
                    email=#{email}
                </when>
                <otherwise>
                    gender=1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--void updateEmp(Employee employee);-->
    <update id="updateEmp">
        UPDATE tb_employee
        <set>
        <if test="lastName!=null">
            last_name=#{lastName},
        </if>
        <if test="email!=null">
            email=#{email},
        </if>
        <if test="gender!=null">
            gender=#{gender}
        </if>
        </set>
        WHERE id=#{id}
    </update>

    <!--List<Employee> getEmpByConditionByForeach(@Param("ids") List<Integer> ids);-->
    <select id="getEmpByConditionByForeach" resultType="com.wondertek.mybatis.domain.Employee">

        SELECT * FROM tb_employee
        WHERE id IN (
            <foreach collection="ids" item="item_id" separator=",">
                #{item_id}
            </foreach>
        )
    </select>

    <!--void addEmps(@Param("employees") List<Employee> employees)-->
    <!--mysql支持直接使用values关键字进行批量插入-->
    <insert id="addEmps">
        INSERT INTO tb_employee(last_name,email,gender,d_id) VALUES
        <foreach collection="employees" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
        </foreach>
    </insert>

    <!--
        mysql 在批量进行插入的时候允许多条插入语句同时操作
    -->
    <!--<insert id="addEmps">
        <foreach collection="employees" item="emp" separator=";">
            INSERT INTO tb_employee(last_name,email,gender,d_id)
            VALUES (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
        </foreach>
    </insert>-->



    <!-- Oracle数据库批量保存：
	 	Oracle不支持values(),(),()
	 	Oracle支持的批量方式
	 	1、多个insert放在begin - end里面
	 		begin
			    insert into employees(employee_id,last_name,email)
			    values(employees_seq.nextval,'test_001','test_001@atguigu.com');
			    insert into employees(employee_id,last_name,email)
			    values(employees_seq.nextval,'test_002','test_002@atguigu.com');
			end;
		2、利用中间表：
			insert into employees(employee_id,last_name,email)
		       select employees_seq.nextval,lastName,email from(
		              select 'test_a_01' lastName,'test_a_e01' email from dual
		              union
		              select 'test_a_02' lastName,'test_a_e02' email from dual
		              union
		              select 'test_a_03' lastName,'test_a_e03' email from dual
		       )
	 -->
    <insert id="addEmps" databaseId="oracle">
        <!-- oracle第一种批量方式 -->
        <!-- <foreach collection="emps" item="emp" open="begin" close="end;">
            insert into employees(employee_id,last_name,email)
               values(employees_seq.nextval,#{emp.lastName},#{emp.email});
        </foreach> -->

        <!-- oracle第二种批量方式  -->
        insert into employees(
        <!-- 引用外部定义的sql -->
        <include refid="insertColumn">
            <property name="testColomn" value="abc"/>
        </include>
        )
        <foreach collection="emps" item="emp" separator="union"
                 open="select employees_seq.nextval,lastName,email from("
                 close=")">
            select #{emp.lastName} lastName,#{emp.email} email from dual
        </foreach>
    </insert>


    <!-- 两个内置参数：
	 	不只是方法传递过来的参数可以被用来判断，取值。。。
	 	mybatis默认还有两个内置参数：
	 	_parameter:代表整个参数
	 		单个参数：_parameter就是这个参数
	 		多个参数：参数会被封装为一个map；_parameter就是代表这个map

	 	_databaseId:如果配置了databaseIdProvider标签。
	 		_databaseId就是代表当前数据库的别名oracle
	  -->

    <!--public List<Employee> getEmpsTestInnerParameter(Employee employee);  -->
    <select id="getEmpsTestInnerParameter" resultType="com.atguigu.mybatis.bean.Employee">
        <!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">
                where last_name like #{lastName}
            </if>
        </if>
        <if test="_databaseId=='oracle'">
            select * from employees
            <if test="_parameter!=null">
                where last_name like #{_parameter.lastName}
            </if>
        </if>
    </select>

    <!--
        抽取可重用的sql片段。方便后面引用
        1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
        2、include来引用已经抽取的sql：
        3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
                include-property：取值的正确方式${prop},
                #{不能使用这种方式}
    -->
    <sql id="insertColumn">
        <if test="_databaseId=='oracle'">
            employee_id,last_name,email
        </if>
        <if test="_databaseId=='mysql'">
            last_name,email,gender,d_id
        </if>
    </sql>













</mapper>