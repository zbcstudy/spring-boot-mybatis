<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wondertek.mybatis.mapper.EmployeeMapper">

    <!--
        eviction:缓存回收策略
            LRU：最近最少使用的
        flushInterval：缓存刷新间隔
                        默认不清空，设置一个毫秒值
        readOnly：是否只读
            true：只读；mybatis认为所有从缓存中获取的数据操作都是只读操作，不会修改数据
                  mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
            false:非只读，mybatis觉得数据可能被修改
                        mybatis会利用序列化&反序列化克隆一份新的数据。安全，速度慢
        size:缓存存放多少个元素
        type：指定自定义缓存的全类名

    -->
    <!--<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache">
        <property name="timeToIdleSeconds" value="3600"/>
        <property name="timeToLiveSeconds" value="3600"/>
        <!-- 同ehcache参数maxElementsInMemory -->
        <property name="maxEntriesLocalHeap" value="1000"/>
        <!-- 同ehcache参数maxElementsOnDisk -->
        <property name="maxEntriesLocalDisk" value="10000000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>

    <!--Map<Integer, Employee> getEmpByLastNameLikeReturnMap(String lastName);-->
    <select id="getEmpByLastNameLikeReturnMap" resultType="com.wondertek.mybatis.domain.Employee">
        SELECT * FROM tb_employee WHERE last_name LIKE #{last_name};
    </select>

    <!-- Map<String, Object> getEmpByIdReturnMap(Integer id);-->
    <select id="getEmpByIdReturnMap" resultType="map">
        SELECT * FROM tb_employee WHERE id = #{id};
    </select>

    <!--public List<Employee> getEmpByLastNameLike(String lastName);-->
    <!--返回的是一个集合,要写集合中元素的类型-->
    <select id="getEmpByLastNameLike" resultType="com.wondertek.mybatis.domain.Employee">
        SELECT * FROM tb_employee WHERE last_name LIKE #{last_name};
    </select>

    <select id="getEmpByMap" resultType="emp"
            databaseId="mysql">
        select id,last_name,gender,email from tb_employee where id = #{id} AND last_name=#{lastName}
    </select>

    <select id="getEmpByIdAndLastName" resultType="emp"
            databaseId="mysql">
        select id,last_name,gender,email from tb_employee where id = #{id} AND last_name=#{lastName}
    </select>

    <!--
    namespace:名称空间;指定为接口的全类名
    id 唯一标识
    resultType 范围值类型
    databaseId:指定查询数据库的类型
    -->
    <select id="getEmpById" resultType="emp"
            databaseId="mysql">
        select id,last_name,gender,email,version from tb_employee where id = #{id}
    </select>

    <!--当数据库类型为oracle时 查询的SQL语句-->
    <!--<select id="getEmpById" resultType="emp"
            databaseId="oracle">
        select id,last_name,gender,email from tb_employee where id = #{id}
    </select>-->

    <!--
        public void addEmp(Employee employee);
        parameterType 参数类型 可以省略
        mybatis 支持自增主键,自增主键值得获取，mybatis也是使用statement.getGenreatedKeys()
        useGeneratedKeys="true" : 使用自增逐渐获取主键策略
        keyProperty : 指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给JavaBean的那个属性
    -->
    <insert id="addEmp" parameterType="com.wondertek.mybatis.domain.Employee"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tb_employee(last_name,email,gender)
        VALUES (#{lastName},#{email},#{gender})
    </insert>

    <!--
        oracle数据库不支持自增，oracle使用序列
         每次插入先获取序列的值
    -->
    <insert id="addEmp" databaseId="oracle">
        <!--
            keyProperty:查出的主键值封装给JavaBean的那个属性
            order="BEFORE" ： 当前SQL在插入SQL之前执行
            resultType="Integer": 查出的数据的返回值执行
            运行顺序：
        -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            SELECT employee_seq.nextval from dual
        </selectKey>
        <!-- 插入之前先获取主键-->
        INSERT INTO tb_employee(id,last_name,email,gender)
        VALUES (#{id},#{lastName},#{email,jdbcType=NULL},#{gender})

        <!-- 插入之后先获取主键-->
        /*INSERT INTO tb_employee(id,last_name,email,gender)
        VALUES (employee_seq.currval,#{lastName},#{email},#{gender})*/
    </insert>


    <!-- public void updateEmp(Employee employee);-->
    <update id="updateEmp">
        UPDATE tb_employee
        SET last_name = #{lastName},email=#{email},gender=#{gender},version=#{version}
        WHERE id=#{id}
    </update>

    <!--public void deleteEmp(Integer id);-->
    <delete id="deleteEmp">
        DELETE FROM tb_employee WHERE id = #{id}
    </delete>

    <!--List<Employee> getAll();-->
    <select id="getAll" resultType="com.wondertek.mybatis.domain.Employee">
        select * from tb_employee
    </select>















</mapper>