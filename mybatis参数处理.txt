单个参数：mybatis不做任何处理
    #{参数名} ：直接取值

多个参数 ：mybatis遇见多个参数会做特殊处理
    多个参数会被封装成map
        key:param1...paramN,或者参数的的索引也可以
    #{} 从map中获取指定key的值

    Parameter 'id' not found. Available parameters are [arg1, arg0, param1, param2]

命名参数：明确指定封装参数值map的key；@Param("id")
    多个参数会被封装成map
        key:使用@Param注解指定值
        value：对应的值
    #{指定的key}取出对应的参数的值


Pojo
如果多个参数正好是我们业务逻辑的数据模型，我们可以直接传入Pojo
    #{属性名}：取出传入的pojo的属性值

map：
    如果多个参数不是pojo模型，为了方便，直接传入map

如果多个参数不是业务模型中的数据，但是经常使用，推荐编写一个TO（transfer object） 数据传输对象
    Page{
        int index;
        int size;
    }


多个参数封装
collections map list 数组

ParamNameResolver
public Object getNamedParams(Object[] args) {
    final int paramCount = names.size();
    if (args == null || paramCount == 0) {
      return null;
    } else if (!hasParamAnnotation && paramCount == 1) {
      return args[names.firstKey()];
    } else {
      final Map<String, Object> param = new ParamMap<Object>();
      int i = 0;
      for (Map.Entry<Integer, String> entry : names.entrySet()) {
        param.put(entry.getValue(), args[entry.getKey()]);
        // add generic param names (param1, param2, ...)
        //额外的将每一个参数保存到map中，使用新的的key：param1...paramN
        final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);
        // ensure not to overwrite parameter named with @Param
        if (!names.containsValue(genericParamName)) {
          param.put(genericParamName, args[entry.getKey()]);
        }
        i++;
      }
      return param;
    }
  }


#{}:可以获取map中的值或者pojo对象属性的值
${}:可以获取map中的值或者pojo对象属性的值
    区别：
        #{} 以预编译的形式，将参数设置到SQL中 PreparedStatement,防止sql注入
        ${} 取出的值直接拼装在SQL语句中；会有安全问题
        多数情况下，使用#{}
        原生jdbc不支持占位符的地方我们可以使用${}进行取值
        eg:分表：按照年份分表拆分
            select * from ${year}_salary where xxx;
            select * from tb_emp order by ${f_name} ${order}

#{}: 更丰富的用法
    规定参数的一些规则
     javaType = null
    javaType通常在某些特定条件下需要设置
    在数据为null时 有些数据库可能不能识别mybatis对null的默认处理 eg Oracle报错
    JdbcType OTHER:无效的类型 因为mybatis对所有的null都映射为原生jdbc的OTHER类型

    由于全局配置中：jdbcTypeForNull = OTHER;oracle不支持
    1.#{email,jdbcType=NULL}
    2 jdbcTypeForNull=NULL
        <setting name="jdbcTypeForNull" value="NULL"/>


todo
    mysql oracle 批量新增
    mybatis内置参数 _databaseId _parameter
    查询时使用<bind name="" value="">
    <sql id=""></sql>





